# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XeWaxTwodKkAzjx1PQRXop5mqUOAMGxg
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline



(x_train,y_train) ,(x_test,y_test) =keras.datasets.mnist.load_data()

len(x_train)
len(x_test)

x_train.shape
x_test=x_test/255
x_train=x_train/255

plt.matshow(x_train[10])

x_train_new=x_train.reshape(len(x_train),28*28)
x_test_new=x_test.reshape(len(x_test),28*28)

model=keras.Sequential([
                  keras.layers.Dense(100,input_shape=(784,),activation='relu'),
                   keras.layers.Dense(10,activation='sigmoid')

])
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(x_train_new,y_train, epochs=10)

model.evaluate(x_test_new,y_test)

pre=model.predict(x_test_new)

plt.matshow(x_test[0])

pre[0]
np.argmax(pre[0])
pre=[np.argmax(i) for i in pre]

tf.math.confusion_matrix(labels=y_test ,predictions=pre)